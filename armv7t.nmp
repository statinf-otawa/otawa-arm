include "defs.nmp"
include "defs2.nmp"

let ARMV7T = 1
macro is_cond = \
	(if cond.value == 14 then 0 else IS_COND endif)
macro is_control(r) = \
	(if r.number == 15 then IS_CONTROL else 0 endif)
macro is_mem_control(r, b) = \
	is_control(r)|\
	(if r.number == 15 && b.number == 13 then IS_CONTROL|IS_RETURN else 0 endif)


// condition extension
extend full_condition
	otawa_ever = value == 14
	otawa_never = value == 15
	otawa_cond =
		switch(value) {
		case 0:		"sem::EQ"
		case 1:		"sem::NE"
		case 2:		"sem::UGE"
		case 3:		"sem::ULT"
		case 8:		"sem::UGT"
		case 9:		"sem::ULE"
		case 10:	"sem::GE"
		case 11:	"sem::LT"
		case 12:	"sem::GT"
		case 13:	"sem::LE"
		default:	"sem::ANY_COND"
	}
	otawa_condition = cond<3..0>

extend
	B_T3
		otawa_condition = cond.otawa_condition
	

extend condition
	otawa_ever = value == 14
	otawa_never = value == 15
	otawa_cond =
		switch(value) {
		case 0:		"sem::EQ"
		case 1:		"sem::NE"
		case 2:		"sem::UGE"
		case 3:		"sem::ULT"
		case 8:		"sem::UGT"
		case 9:		"sem::ULE"
		case 10:	"sem::GE"
		case 11:	"sem::LT"
		case 12:	"sem::GT"
		case 13:	"sem::LE"
		default:	"sem::ANY_COND"
	}
	otawa_condition = cond<3..0>

extend
	BLX_ARM,
	LDREX_A1, LDREXB_A1, LDREXD_A1, LDREXH_A1,
	MLS, MOVW_imm, MOVT,
	STRD_imm, STRD_reg_A1,
	STREX_A1, STREXB_A1, STREXD_A1, STREXH_A1,
	UBFX, UXTB_A1,
	VNMLA_VNMLS_A1, VMRS_A1
		otawa_condition = cond.otawa_condition


extend RegisterListThumb
	has_pc = _P


// included here for ascending compatibility
extend B_Cond
	otawa_target = target


// branches
extend B_thumb_T2
	otawa_kind = IS_CONTROL
	otawa_target = target

extend B_T3
	otawa_kind = IS_CONTROL | is_cond
	otawa_target = addr
	otawa_cond = cond.otawa_cond

extend B_T4
	otawa_kind = IS_CONTROL
	otawa_target = addr

extend BL_imm_T1
	otawa_kind = IS_CONTROL | IS_CALL
	otawa_target = targetAddress

extend BLX_imm_T2
	otawa_kind = IS_CONTROL | IS_CALL
	otawa_target = targetAddress

extend BLX_ARM
	otawa_kind = IS_CONTROL | IS_CALL | is_cond

extend CBNZ_CBZ_thumb
	otawa_kind = IS_CONTROL | IS_COND
	otawa_target = target
	otawa_sem = {
		if nonzero ^ (R(rn) == 0) then
			_branch(__IADDR + 4 + imm32);
		endif;
	}

extend TBB_TBH
	otawa_kind = IS_CONTROL | IS_MEM | IS_LOAD
	otawa_target = 0

extend LDR_imm_T3, LDR_imm_T4
 	otawa_kind =
 		  IS_MEM
 		| IS_INT
 		| IS_LOAD
 		| is_mem_control(Rt, Rn)

extend LDM_T2
	otawa_kind = IS_MEM | IS_LOAD | IS_MULTI | IS_INT
		| (if register_list.has_pc then IS_CONTROL else 0 endif)
		| (if Rn.number == 13 && register_list.has_pc then IS_CONTROL|IS_RETURN else 0 endif)
	otawa_sem = {
		if Rn.use_pc || register_list<15..15> == 1 then seti(R(15), __IADDR + 8); endif;
		cnt = 0;
		ii = 0;
		otawa_sem_cnt;
		seti(t2, 4);
		// addr_mode = MULT_IA
		_set(t1, Rn.i);
		seti(t3, cnt * 4); add(t3, t1, t3);
		ii = 0;
		otawa_sem_rec;
		if W == 1 then _set(Rn.i, t3); endif;
		if register_list<15..15> == 1 then _branch(R(15)); endif;
	}
	otawa_sem_cnt = {
		if ii <= 15 then
			if register_list<ii..ii> == 1 then cnt = cnt + 1; endif;
			ii = ii + 1;
			otawa_sem_cnt;
		endif;
	}
	otawa_sem_rec = {
		if ii <= 15 then
			if register_list<ii..ii> == 1 then
				load(R(ii), t1, UINT32);
				add(t1, t1, t2);
			endif;
			ii = ii + 1;
			otawa_sem_rec;
		endif;
	}
	otawa_multi = register_list

extend STMDB_T1
	otawa_kind = IS_MEM | IS_STORE | IS_MULTI | IS_INT
	otawa_multi = register_list

extend RSB_imm_T2
	otawa_kind =
		  IS_ALU| IS_INT | is_control(Rd) | IS_IMMEDIATE
	otawa_target =
		if Rn.number == 15 then __IADDR + 4 - imm32 else 0 endif

extend LDC_thumb2
	otawa_kind = IS_MEM | IS_INT | IS_LOAD

extend STC_thumb2
	otawa_kind = IS_MEM | IS_INT | IS_STORE

extend
	MOVW_imm, MOV_imm_T3,
	MOVT, MOVT_T1
	otawa_kind = IS_INT | IS_ALU

extend MLS
	otawa_kind = IS_INT | IS_ALU | IS_MUL | is_cond

extend MLS_thumb2
	otawa_kind = IS_INT | IS_ALU | IS_MUL

extend UBFX, UXTB_A1
	otawa_kind = IS_INT | IS_ALU | is_cond

extend UBFX_T1, UXTB_T1, UXTAB_T1
	otawa_kind = IS_INT | IS_ALU

extend STRD_imm, STRD_reg_A1
	otawa_kind = IS_INT | IS_MEM | IS_STORE | is_cond


// FP instructions
extend VMRS_A1
	otawa_kind = IS_FLOAT | IS_ALU | is_cond

extend
	VADD_arm, VCVT_arm, VMOV_arm, VSUB_arm_fp,
	VADD_thumb, VCVT_thumb, VMOV_thumb,VSUB_thumb_fp, VMRS_T1
	otawa_kind = IS_FLOAT | IS_ALU

extend VNMLA_VNMLS_A1
	otawa_kind = IS_FLOAT | IS_ALU | IS_MUL | is_cond

extend VMLA_arm, VMLA_thumb, VMUL_arm, VMUL_thumb
	otawa_kind = IS_FLOAT | IS_ALU | IS_MUL

extend VDIV_arm, VDIV_thumb
	otawa_kind = IS_FLOAT | IS_ALU | IS_DIV

extend VLDR_arm
	otawa_kind = IS_FLOAT | IS_MEM | IS_LOAD //| is_cond

extend VLDR_thumb
	otawa_kind = IS_FLOAT | IS_MEM | IS_LOAD

extend VLDM_arm, VPOP_thumb
	otawa_kind = IS_FLOAT | IS_MEM | IS_LOAD | IS_MULTI

extend VSTR_arm
	otawa_kind = IS_FLOAT | IS_MEM | IS_STORE //| is_cond

extend VSTR_thumb
	otawa_kind = IS_FLOAT | IS_MEM | IS_STORE

extend VSTM_arm, VPUSH_thumb
	otawa_kind = IS_FLOAT | IS_MEM | IS_STORE
